"""
Django settings for account project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""


from datetime import timedelta
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.environ.get("DEBUG", "0")))

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS").split()

CSRF_TRUSTED_ORIGINS = os.environ.get("DJANGO_CSRF_TRUSTED_ORIGINS").split()

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    # Need to migrate as usual to postgres and then manually create collections
    # token_blacklist_blacklistedtoken and token_blacklist_outstandingtoken in mongo.
    "rest_framework_simplejwt.token_blacklist",
    "djoser",
    "drf_spectacular",
    "api",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "account.urls"

AUTH_USER_MODEL = "api.MyUser"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "account.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

MONGO_DATABASE = os.environ.get("MONGO_INITDB_DATABASE")
MONGO_USERNAME = os.environ.get("MONGO_INITDB_ROOT_USERNAME")
MONGO_PASSWORD = os.environ.get("MONGO_INITDB_ROOT_PASSWORD")
MONGO_HOST = os.environ.get("MONGO_HOST")
MONGO_PORT = os.environ.get("MONGO_PORT")
MONGO_RSNAME = os.environ.get("MONGO_RSNAME", "rs0")

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("POSTGRES_DB"),
        "USER": os.environ.get("POSTGRES_USER"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
        "HOST": os.environ.get("POSTGRES_HOST"),
        "PORT": os.environ.get("POSTGRES_PORT"),
    },
    "querydb": {
        "ENGINE": "djongo",
        "NAME": MONGO_DATABASE,
        "ENFORCE_SCHEMA": False,
        "CLIENT": {
            "host": f"mongodb://{MONGO_HOST}:{MONGO_PORT}/?replicaSet={MONGO_RSNAME}",
            "username": MONGO_USERNAME,
            "password": MONGO_PASSWORD,
        },
    },
}

DATABASE_ROUTERS = ["account.routers.DBRouter"]

REDIS_HOST = os.environ.get("REDIS_HOST")
REDIS_PORT = os.environ.get("REDIS_PORT")
REDIS_USER = os.environ.get("REDIS_USER")
REDIS_PASSWORD = os.environ.get("REDIS_PASSWORD")
REDIS_DB = os.environ.get("REDIS_DB")
# Default TTL in seconds.
# Set as token lifetime since caches are per tokens.
CACHE_TTL = int(os.environ.get("ACCESS_TOKEN_LIFETIME", "60")) * 60
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_USER}@{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": REDIS_PASSWORD,
            "TIMEOUT": CACHE_TTL,
            "KEY_PREFIX": os.environ.get("REDIS_KEY_PREFIX", "account-api-dev"),
            "IGNORE_EXCEPTIONS": True,
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTStatelessUserAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_FILTER_BACKENDS": [
        "rest_framework.filters.OrderingFilter",
        "rest_framework.filters.SearchFilter",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 6,
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(
        minutes=int(os.environ.get("ACCESS_TOKEN_LIFETIME", "60"))
    ),
    "REFRESH_TOKEN_LIFETIME": timedelta(
        days=int(os.environ.get("REFRESH_TOKEN_LIFETIME", "1"))
    ),
    # Disable for CQRS.
    "ROTATE_REFRESH_TOKENS": False,
    # Disable for CQRS.
    "BLACKLIST_AFTER_ROTATION": False,
    # Disable for CQRS.
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("JWT",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "TOKEN_OBTAIN_SERIALIZER": "api.serializers.MyStatelessTokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "api.serializers.MyTokenRefreshSerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "api.serializers.MyTokenBlacklistSerializer",
}

DJOSER = {
    "USER_ID_FIELD": "id",
    "PASSWORD_RESET_CONFIRM_URL": "#/password/reset/confirm/{uid}/{token}",
    "USERNAME_RESET_CONFIRM_URL": "#/username/reset/confirm/{uid}/{token}",
    "ACTIVATION_URL": "#/activate/{uid}/{token}",
    "SEND_ACTIVATION_EMAIL": True,
    "SEND_CONFIRMATION_EMAIL": False,
    "PASSWORD_CHANGED_EMAIL_CONFIRMATION": False,
    "LOGOUT_ON_PASSWORD_CHANGE": True,
    "TOKEN_MODEL": None,
    "SERIALIZERS": {
        "user_create": "api.serializers.MyUserCreateSerializer",
    },
    "PERMISSIONS": {
        # Customized permissions to compare UUID and string.
        "user": ["api.permissions.CurrentUserOrAdmin"],
        "user_list": ["api.permissions.CurrentUserOrAdmin"],
        "user_delete": ["api.permissions.CurrentUserOrAdmin"],
        "set_password": ["api.permissions.CurrentUserOrAdmin"],
        # Belowing permissions are not required but used as safeguards to disable all related endpoints.
        "username_reset": ["rest_framework.permissions.IsAdminUser"],
        "username_reset_confirm": ["rest_framework.permissions.IsAdminUser"],
        "set_username": ["rest_framework.permissions.IsAdminUser"],
        "token_create": ["rest_framework.permissions.IsAdminUser"],
        "token_destroy": ["rest_framework.permissions.IsAdminUser"],
    },
}

SPECTACULAR_SETTINGS = {
    "TITLE": "Account Management API",
    "DESCRIPTION": "Account Management API",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "PREPROCESSING_HOOKS": ["drf_spectacular.hooks.preprocess_exclude_path_format"],
    "SWAGGER_UI_SETTINGS": {"defaultModelsExpandDepth": -1},
}

EMAIL_BACKEND = "api.backends.GmailBackend"

# Celery Configuration Options.
# # Assuming RabbitMQ and Redis are running, run these
# # commands in order.
# python manage.py runserver
# celery -A account worker -l INFO
# # Only if using beat for scheduling, such as handling
# # result_expires.
# # celery -A account beat -l INFO ...

# Let celery use TIME_ZONE, otherwise setting expires
# might cause immediate revoking.
# This is default action thus not really necessary. Turning
# this on/off both shows occasional immediate revoking.
# CELERY_TIMEZONE = TIME_ZONE

# Overall soft time limit: 9 minutes. SoftTimeLimitExceeded
# exception will be raised so that certain procedure can
# be executed before task is killed. Can be specified per
# task.
CELERY_TASK_SOFT_TIME_LIMIT = 9 * 60

# Overall hard time limit: 10 minutes. The task will be
# killed then. Can be specified per task.
CELERY_TASK_TIME_LIMIT = 10 * 60

# Disable prefetching.
CELERY_WORKER_PREFETCH_MULTIPLIER = 1

# Default is json, add pickle here to enable it as serializer.
CELERY_ACCEPT_CONTENT = ["json", "pickle"]
# When using json:
# kombu.exceptions.EncodeError: Object of type ActivationEmail is not JSON serializable
# if passing email_message to task;
# kombu.exceptions.EncodeError: Object of type SafeMIMEMultipart is not JSON serializable
# if passing email_message.message() to task.
#
# When using pickle:
# kombu.exceptions.EncodeError: cannot pickle '_io.BufferedReader' object
# if passing email_message to task;
# kombu.exceptions.ContentDisallowed: Refusing to deserialize untrusted content of type
# pickle (application/x-python-serialize)
# if passing email_message.message() to task and pickle is not included in
# CELERY_ACCEPT_CONTENT.
#
# When using msgpack (need to install first):
# kombu.exceptions.EncodeError: can not serialize 'ActivationEmail' object
# if passing email_message to task;
CELERY_TASK_SERIALIZER = "pickle"

# Run synchronously for testing and debugging.
# CELERY_TASK_ALWAYS_EAGER = True

# To support resource separation, manually setup a virtual host first.
# Inside `rabbit` container, run:
# rabbitmqctl add_vhost account-api-dev
# rabbitmqctl set_permissions -p "account-api-dev" "hellokitty" ".*" ".*" ".*"
#
# "transport://username:password@hostname:port/virtual_host"
CELERY_BROKER_URL = f'amqp://{os.environ.get("RABBITMQ_DEFAULT_USER")}:{os.environ.get("RABBITMQ_DEFAULT_PASS")}@{os.environ.get("RABBITMQ_HOST")}:{os.environ.get("RABBITMQ_NODE_PORT")}/{os.environ.get("RABBITMQ_DEFAULT_VHOST")}'

# "redis://username:password@hostname:port/db"
CELERY_RESULT_BACKEND = f'redis://{os.environ.get("REDIS_USER")}:{os.environ.get("REDIS_PASSWORD")}@{os.environ.get("REDIS_HOST")}:{os.environ.get("REDIS_PORT")}/{os.environ.get("REDIS_DB")}'

# A built-in periodic task will delete the results after this time
# (celery.backend_cleanup), assuming that celery beat is enabled. The
# task runs daily at 4am.
CELERY_RESULT_EXPIRES = 12 * 60 * 60

# Setup queues manually.
# Not needed if CELERY_TASK_CREATE_MISSING_QUEUES is True (by default).
# celery -A account worker -l INFO -> [queues]: celery
# celery -A account worker -l INFO -Q fast -> [queues]: fast
# CELERY_TASK_QUEUES = {
#     "fast": {
#         "exchange": "fast",
#         "routing_key": "fast",
#     },
#     "slow": {
#         "exchange": "slow",
#         "routing_key": "slow",
#     },
# }
# When manual CELERY_TASK_QUEUES is set, things change.
# celery -A account worker -l INFO
#   -> [queues]: fast and slow
# celery -A account worker -l INFO -Q fast
#   -> [queues]: fast
CELERY_TASK_QUEUES = {
    # The default queue for tasks is celery. Either keep
    # it or set CELERY_TASK_DEFAULT_QUEUE = "fast"
    "celery": {
        "exchange": "celery",
        "routing_key": "celery",
    },
    "fast": {
        "exchange": "fast",
        "routing_key": "fast",
    },
    "slow": {
        "exchange": "slow",
        "routing_key": "slow",
    },
}
# celery -A account worker -l INFO
#   -> [queues]: celery, fast and slow
